
!pip install streamlit
!pip install streamlit-option-menu

%%writefile app.py
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler
from streamlit_option_menu import option_menu    


# ==========================
# 💄 Custom CSS Styling
# ==========================
def load_custom_css():
    st.markdown("""
        <style>
            .main {
                background-color: #121212;
                color: #f0f0f0;
            }

            h1, h2, h3, h4, h5 {
                color: #ffffff;
            }

            /* Buttons */
            .stButton>button {
                background-color: #4CAF50;
                color: white;
                font-weight: bold;
                border: none;
                border-radius: 6px;
            }

            /* Sliders */
            .stSlider > div > div > div {
                background: #4CAF50;
            }

            /* Tables */
            .stDataFrame, .stTable {
                background-color: #1e1e1e;
                color: #f0f0f0;
            }

            /* Scrollbar */
            ::-webkit-scrollbar {
                width: 10px;
            }
            ::-webkit-scrollbar-track {
                background: #2e2e2e;
            }
            ::-webkit-scrollbar-thumb {
                background: #4CAF50;
                border-radius: 10px;
            }
        </style>
    """, unsafe_allow_html=True)

# ==========================
# 📦 Load Dataset
# ==========================
@st.cache_data
def load_data():
    df = pd.read_csv("merged_beijing_data.csv", parse_dates=True)
    return df

# ==========================
# 📄 Overview Page
# ==========================
def show_overview(df):
    st.title("📄 Dataset Overview")
    st.subheader("🧾 Sample Data")
    st.dataframe(df.head(), use_container_width=True)

    st.subheader("📏 Dataset Shape")
    st.info(f"✅ **{df.shape[0]}** Rows & **{df.shape[1]}** Columns")

    st.subheader("❗ Missing Values")
    missing = df.isnull().sum()
    st.bar_chart(missing[missing > 0])

# ==========================
# 📊 EDA Page
# ==========================
def show_eda(df):
    st.title("📊 Advanced Exploratory Data Analysis")
    sns.set_theme(style="whitegrid")

    st.header("1️⃣ PM2.5 Distribution")
    fig1, ax1 = plt.subplots(figsize=(8, 4))
    sns.histplot(df["PM2.5"].dropna(), bins=40, kde=True, color="tomato", ax=ax1)
    ax1.set_title("Distribution of PM2.5 (µg/m³)", fontsize=14)
    ax1.set_xlabel("PM2.5", fontsize=12)
    st.pyplot(fig1)

    st.header("2️⃣ Correlation Heatmap")
    fig2, ax2 = plt.subplots(figsize=(10, 6))
    selected_cols = ['PM2.5', 'PM10', 'SO2', 'NO2', 'CO', 'O3', 'TEMP', 'PRES', 'DEWP', 'WSPM']
    corr = df[selected_cols].corr()
    sns.heatmap(corr, annot=True, cmap="YlOrRd", ax=ax2, linewidths=0.5)
    ax2.set_title("Correlation Between Pollutants and Weather Parameters", fontsize=14)
    st.pyplot(fig2)

    st.header("3️⃣ Monthly Trend of PM2.5")
    df["date"] = pd.to_datetime(df.index, errors='coerce')
    df = df.set_index("date")
    monthly_avg = df["PM2.5"].resample("M").mean()
    fig3, ax3 = plt.subplots(figsize=(10, 4))
    monthly_avg.plot(ax=ax3, color="slateblue", marker="o", linestyle="--")
    ax3.set_title("Monthly Average PM2.5 (µg/m³)", fontsize=14)
    ax3.set_ylabel("PM2.5 (µg/m³)")
    st.pyplot(fig3)

    st.header("4️⃣ Dynamic Pollutant Trends")
    pollutant = st.selectbox("Select a pollutant to visualize its trend", selected_cols[1:])
    if pollutant:
        fig4, ax4 = plt.subplots(figsize=(10, 4))
        df[pollutant].resample("M").mean().plot(ax=ax4, color="teal", linestyle="-", marker=".")
        ax4.set_title(f"Monthly Average {pollutant}", fontsize=14)
        ax4.set_ylabel(f"{pollutant} (µg/m³ or mg/m³)")
        st.pyplot(fig4)

    st.header("5️⃣ Outlier Detection (Boxplot)")
    box_cols = ['PM2.5', 'PM10', 'SO2', 'NO2', 'CO', 'O3']
    selected_box = st.selectbox("Select a feature for boxplot", box_cols)
    if selected_box:
        fig5, ax5 = plt.subplots()
        sns.boxplot(y=df[selected_box].dropna(), color="lightblue", ax=ax5)
        ax5.set_title(f"Boxplot of {selected_box}", fontsize=14)
        st.pyplot(fig5)

# ==========================
# 📈 Prediction Page
# ==========================
def show_prediction(df):
    st.title("📈 Predict PM2.5 Level")
    st.markdown("Adjust the sliders to simulate conditions:")

    features = {
        "PM10": st.slider("PM10 (µg/m³)", 0.0, 500.0, 100.0),
        "SO2": st.slider("SO2 (µg/m³)", 0.0, 100.0, 20.0),
        "NO2": st.slider("NO2 (µg/m³)", 0.0, 200.0, 60.0),
        "CO": st.slider("CO (mg/m³)", 0.0, 10.0, 1.0),
        "O3": st.slider("O3 (µg/m³)", 0.0, 300.0, 80.0),
        "TEMP": st.slider("Temperature (°C)", -20.0, 50.0, 20.0),
        "PRES": st.slider("Pressure (hPa)", 990.0, 1100.0, 1012.0),
        "DEWP": st.slider("Dew Point (°C)", -30.0, 30.0, 5.0),
        "WSPM": st.slider("Wind Speed (m/s)", 0.0, 20.0, 2.5),
    }

    if st.button("🚀 Predict PM2.5"):
        input_df = pd.DataFrame([features])
        required_columns = list(features.keys()) + ['PM2.5']
        df_clean = df[required_columns].dropna()

        if df_clean.empty:
            st.error("❌ No valid data available for training after dropping NaN values.")
            return

        X = df_clean[list(features.keys())]
        y = df_clean['PM2.5']
        scaler = StandardScaler()
        X_scaled = scaler.fit_transform(X)
        model = RandomForestRegressor(n_estimators=100, random_state=42)
        model.fit(X_scaled, y)

        prediction = model.predict(scaler.transform(input_df))
        st.success(f"✅ Predicted PM2.5 Level: **{prediction[0]:.2f} µg/m³**")

# ==========================
# 🚀 Main App
# ==========================
def main():
    load_custom_css()
    df = load_data()

    st.markdown("<h1 style='text-align: center; color: #4CAF50;'>🌫️ Air Quality Prediction</h1>", unsafe_allow_html=True)

    selected = option_menu(
        menu_title=None,
        options=["📄 Overview", "📊 EDA", "📈 Prediction"],
        icons=["file-earmark-text", "bar-chart", "graph-up"],
        orientation="horizontal",
        default_index=0,
        styles={
            "container": {"padding": "0!important", "background-color": "#1f1f1f"},
            "icon": {"color": "#ffffff", "font-size": "18px"},
            "nav-link": {
                "font-size": "16px",
                "text-align": "center",
                "margin": "0px",
                "color": "white",
                "padding": "10px",
            },
            "nav-link-selected": {
                "background-color": "#4CAF50",
                "color": "white",
                "font-weight": "bold",
            },
        },
    )

    if selected == "📄 Overview":
        show_overview(df)
    elif selected == "📊 EDA":
        show_eda(df)
    elif selected == "📈 Prediction":
        show_prediction(df)

if __name__ == "__main__":
    main()


!wget -q -O - ipv4.icanhazip.com

!streamlit run app.py & npx localtunnel --port 8501
