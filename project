# app.py
%%writefile app.py
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler

# ==========================
# 💄 Custom CSS Styling
# ==========================
def load_custom_css():
    st.markdown("""
        <style>
            .main { background-color: #f8f9fa; }
            h1, h2, h3 { color: #2c3e50; }
            .stButton>button { background-color: #4CAF50; color: white; font-weight: bold; }
            .stSlider > div > div > div { background: #4CAF50; }
        </style>
    """, unsafe_allow_html=True)

# ==========================
# 📦 Load Dataset
# ==========================
@st.cache_data
def load_data():
    df = pd.read_csv("merged_beijing_data.csv", parse_dates=True)
    return df

# ==========================
# 📊 Sidebar Navigation
# ==========================
def sidebar():
    st.sidebar.title("🌫️ CMP7005 PM2.5 Prediction")
    return st.sidebar.radio("Navigate to ➤", ["📄 Overview", "📊 EDA", "📈 Prediction"])

# ==========================
# 📄 Overview Page
# ==========================
def show_overview(df):
    st.title("📄 Dataset Overview")
    st.markdown("This app visualizes air quality and weather data from Beijing (2013–2017).")

    st.subheader("🧾 Sample Data")
    st.dataframe(df.head(), use_container_width=True)

    st.subheader("📏 Dataset Shape")
    st.info(f"✅ **{df.shape[0]}** Rows & **{df.shape[1]}** Columns")

    st.subheader("❗ Missing Values")
    missing = df.isnull().sum()
    st.bar_chart(missing[missing > 0])

# ==========================
# 📊 EDA Page
# ==========================
def show_eda(df):
    st.title("📊 Exploratory Data Analysis")

    st.markdown("Toggle the checkboxes to explore the data:")

    if st.checkbox("📌 PM2.5 Distribution Histogram"):
        fig, ax = plt.subplots()
        sns.histplot(df["PM2.5"].dropna(), bins=50, color="salmon", edgecolor='black', ax=ax)
        ax.set_title("Distribution of PM2.5", fontsize=13)
        st.pyplot(fig)

    if st.checkbox("🧠 Correlation Heatmap"):
        fig, ax = plt.subplots(figsize=(10, 6))
        corr = df[['PM2.5', 'PM10', 'SO2', 'NO2', 'CO', 'O3']].corr()
        sns.heatmap(corr, annot=True, cmap="coolwarm", ax=ax, linewidths=0.5)
        ax.set_title("Pollutants Correlation", fontsize=13)
        st.pyplot(fig)

    if st.checkbox("📅 Monthly PM2.5 Trend"):
        df["date"] = pd.to_datetime(df.index, errors='coerce')
        df = df.set_index("date")
        fig, ax = plt.subplots(figsize=(10, 4))
        df["PM2.5"].resample('M').mean().plot(ax=ax, color="purple")
        ax.set_title("Monthly Average PM2.5", fontsize=13)
        ax.set_ylabel("PM2.5 (µg/m³)")
        st.pyplot(fig)

# ==========================
# 📈 Prediction Page
# ==========================
def show_prediction(df):
    st.title("📈 Predict PM2.5 Level")
    st.markdown("Adjust the sliders to simulate conditions:")

    features = {
        "PM10": st.slider("PM10 (µg/m³)", 0.0, 500.0, 100.0),
        "SO2": st.slider("SO2 (µg/m³)", 0.0, 100.0, 20.0),
        "NO2": st.slider("NO2 (µg/m³)", 0.0, 200.0, 60.0),
        "CO": st.slider("CO (mg/m³)", 0.0, 10.0, 1.0),
        "O3": st.slider("O3 (µg/m³)", 0.0, 300.0, 80.0),
        "TEMP": st.slider("Temperature (°C)", -20.0, 50.0, 20.0),
        "PRES": st.slider("Pressure (hPa)", 990.0, 1100.0, 1012.0),
        "DEWP": st.slider("Dew Point (°C)", -30.0, 30.0, 5.0),
        "WSPM": st.slider("Wind Speed (m/s)", 0.0, 20.0, 2.5),
    }

    if st.button("🚀 Predict PM2.5"):
        input_df = pd.DataFrame([features])

        # Train model
        X = df[list(features.keys())]
        y = df['PM2.5']
        scaler = StandardScaler()
        X_scaled = scaler.fit_transform(X)
        model = RandomForestRegressor(n_estimators=100, random_state=42)
        model.fit(X_scaled, y)

        prediction = model.predict(scaler.transform(input_df))

        st.success(f"✅ Predicted PM2.5 Level: **{prediction[0]:.2f} µg/m³**")
# ==========================
# 🚀 Main App
# ==========================
def main():
    load_custom_css()
    df = load_data()
    page = sidebar()

    if page == "📄 Overview":
        show_overview(df)
    elif page == "📊 EDA":
        show_eda(df)
    elif page == "📈 Prediction":
        show_prediction(df)

if __name__ == "__main__":
    main()
