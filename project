%%writefile app.py
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

# Load dataset
df = pd.read_csv("merged_beijing_data.csv")

# Set Streamlit page config
st.set_page_config(page_title="Air Quality Dashboard – CMP7005", page_icon="🌫️", layout="wide")

# Set style
st.markdown("""
    <style>
    .main { background-color: #f9fbfd; }
    .reportview-container { background: #f9fbfd; }
    .stSidebar { background-color: #f0f2f6; }
    </style>
""", unsafe_allow_html=True)

# Add header
st.title("🌫️ CMP7005 Air Quality Analysis Dashboard")
st.markdown("Explore, analyse, and model air pollution data using a user-friendly multipage app.")

# Sidebar
st.sidebar.image("https://upload.wikimedia.org/wikipedia/commons/4/45/Beijing_Smog_2014.jpg", use_column_width=True)
st.sidebar.title("🔍 Navigation")
selection = st.sidebar.radio("Go to Section", ["📊 Data Overview", "📈 EDA", "🤖 Modelling"])

# --- Page: Data Overview ---
if selection == "📊 Data Overview":
    st.subheader("📘 Dataset Preview")
    st.dataframe(df.head(10), use_container_width=True)

    st.markdown("### 📐 Data Shape")
    st.success(f"Rows: {df.shape[0]} | Columns: {df.shape[1]}")

    st.markdown("### ❗ Missing Values")
    nulls = df.isnull().sum()
    st.dataframe(nulls[nulls > 0])

    st.markdown("### 📊 Statistical Summary")
    st.dataframe(df.describe(), use_container_width=True)

# --- Page: EDA ---
elif selection == "📈 EDA":
    st.subheader("📈 Exploratory Data Analysis")
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("#### 🟢 PM2.5 Distribution")
        fig1, ax1 = plt.subplots()
        sns.histplot(df['PM2.5'], bins=50, color="skyblue", ax=ax1)
        ax1.set_xlabel("PM2.5 (µg/m³)")
        st.pyplot(fig1)

    with col2:
        st.markdown("#### 🔵 PM2.5 vs PM10")
        fig2, ax2 = plt.subplots()
        sns.scatterplot(x='PM10', y='PM2.5', data=df, alpha=0.3, color='orange', ax=ax2)
        ax2.set_title("Scatter: PM10 vs PM2.5")
        st.pyplot(fig2)

    st.markdown("#### 🔴 Correlation Heatmap")
    corr = df[['PM2.5', 'PM10', 'SO2', 'NO2', 'CO', 'O3', 'TEMP', 'PRES', 'DEWP', 'WSPM']].corr()
    fig3, ax3 = plt.subplots(figsize=(10, 6))
    sns.heatmap(corr, annot=True, cmap='coolwarm', linewidths=0.5, ax=ax3)
    st.pyplot(fig3)

# --- Page: Modelling ---
elif selection == "🤖 Modelling":
    st.subheader("🤖 PM2.5 Prediction Using Linear Regression")

    features = ['PM10', 'SO2', 'NO2', 'CO', 'O3', 'TEMP', 'PRES', 'DEWP', 'WSPM']
    df = df.dropna(subset=['PM2.5'])

    X = df[features]
    y = df['PM2.5']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    model = LinearRegression()
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)

    col1, col2 = st.columns(2)
    col1.metric("Mean Squared Error", f"{mse:.2f}")
    col2.metric("R² Score", f"{r2:.2f}")

    st.markdown("#### 📉 Predicted vs Actual PM2.5")
    fig4, ax4 = plt.subplots()
    sns.scatterplot(x=y_test, y=y_pred, alpha=0.3, color='green', ax=ax4)
    ax4.set_xlabel("Actual PM2.5")
    ax4.set_ylabel("Predicted PM2.5")
    ax4.set_title("Prediction Results")
    st.pyplot(fig4)
